// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * Retrieve a local stored list of Mendix objects identified by a unique key. When objects are the client state it will be returned, if not they will be re-created. Note: when re-creating the local Mendix object the Mendix Object ID will never be the same.
 * @param {string} key - This field is required.
 * @param {string} entity - This field is required.
 * @returns {Promise.<MxObject[]>}
 */
export async function GetStorageItemObjectList(key, entity) {
    // BEGIN USER CODE
    if (!key) {
        throw new TypeError("Input parameter 'Key' is required");
    }
    if (!entity) {
        throw new TypeError("Input parameter 'Entity' is required");
    }
    return getItem(key).then(function(result) {
        if (result === null) {
            throw new Error("Storage item '".concat(key, "' does not exist"));
        }
        var values = JSON.parse(result);
        return Promise.all(
            values.map(function(value) {
                return getOrCreateMxObject(entity, value);
            })
        ).then(function(newObjects) {
            var newValues = newObjects.map(function(newObject) {
                return serializeMxObject(newObject);
            });
            return setItem(key, JSON.stringify(newValues)).then(function() {
                return newObjects;
            });
        });
    });
    function getItem(key) {
        if (navigator && navigator.product === "ReactNative") {
            var AsyncStorage = require("@react-native-community/async-storage").default;
            return AsyncStorage.getItem(key);
        }
        if (window) {
            var value = window.localStorage.getItem(key);
            return Promise.resolve(value);
        }
        throw new Error("No storage API available");
    }
    function setItem(key, value) {
        if (navigator && navigator.product === "ReactNative") {
            var AsyncStorage = require("@react-native-community/async-storage").default;
            return AsyncStorage.setItem(key, value);
        }
        if (window) {
            window.localStorage.setItem(key, value);
            return Promise.resolve();
        }
        throw new Error("No storage API available");
    }
    function getOrCreateMxObject(entity, value) {
        return getMxObject(value.guid).then(function(existingObject) {
            if (existingObject) {
                return existingObject;
            } else {
                return createMxObject(entity, value);
            }
        });
    }
    function getMxObject(guid) {
        return new Promise(function(resolve, reject) {
            mx.data.get({
                guid: guid,
                callback: function callback(mxObject) {
                    return resolve(mxObject);
                },
                error: function error(_error) {
                    return reject(_error);
                }
            });
        });
    }
    function createMxObject(entity, value) {
        return new Promise(function(resolve, reject) {
            mx.data.create({
                entity: entity,
                callback: function callback(mxObject) {
                    Object.keys(value)
                        .filter(function(attribute) {
                            return attribute !== "guid";
                        })
                        .forEach(function(attributeName) {
                            var attributeValue = value[attributeName];
                            mxObject.set(attributeName, attributeValue);
                        });
                    resolve(mxObject);
                },
                error: function error() {
                    return reject("Could not create '".concat(entity, "' object"));
                }
            });
        });
    }
    function serializeMxObject(object) {
        return object.getAttributes().reduce(
            function(accumulator, attributeName) {
                accumulator[attributeName] = object.get(attributeName);
                return accumulator;
            },
            { guid: object.getGuid() }
        );
    }
    // END USER CODE
}
