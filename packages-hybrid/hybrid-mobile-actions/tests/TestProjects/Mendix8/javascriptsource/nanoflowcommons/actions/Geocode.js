// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * Geocoding is the process of converting addresses (like a street address) into geographic coordinates (latitude and longitude), which you can use to place markers on a map, or position the map.
 * @param {string} address - This field is required.
 * @param {"NanoflowCommons.GeocodingProvider.Google"|"NanoflowCommons.GeocodingProvider.Geocodio"|"NanoflowCommons.GeocodingProvider.LocationIQ"|"NanoflowCommons.GeocodingProvider.MapQuest"} geocodingProvider - This field is required for use on web.
 * @param {string} providerApiKey - This field is required for use on web. Note that the keys are accessible by the end users and should be protected in other ways; for example restricted domain name.
 * @returns {Promise.<MxObject>}
 */
export async function Geocode(address, geocodingProvider, providerApiKey) {
    // BEGIN USER CODE
    /**
     * Documentation:
     *  - Native: https://github.com/devfd/react-native-geocoder
     *  - Google: https://developers.google.com/maps/documentation/geocoding/intro#GeocodingRequests
     *  - Geocodio: https://www.geocod.io/docs/#geocoding
     *  - LocationIQ: https://locationiq.com/docs-html/index.html#search-forward-geocoding
     *  - MapQuest: https://developer.mapquest.com/documentation/open/geocoding-api/address/get/
     */
    if (!address) {
        throw new TypeError("Input parameter 'Address' is required");
    }
    if (navigator && navigator.product === "ReactNative") {
        var Geocoder = require("react-native-geocoder").default;
        return Geocoder.geocodeAddress(address).then(function(results) {
            if (results.length === 0) {
                throw new Error("No results found");
            }
            return createMxObject(String(results[0].position.lat), String(results[0].position.lng));
        });
    }
    if (!geocodingProvider) {
        throw new TypeError("Input parameter 'Geocoding provider' is required for use on web");
    }
    if (!providerApiKey) {
        throw new TypeError("Input parameter 'Provider api key' is required for use on web");
    }
    var url = getApiUrl(geocodingProvider, address, providerApiKey);
    return fetch(url)
        .then(function(response) {
            return response.json().catch(function() {
                return response.text().then(function(text) {
                    throw new Error(text);
                });
            });
        })
        .then(function(response) {
            return getLatLong(geocodingProvider, response);
        })
        .then(function(latLong) {
            return createMxObject(latLong[0], latLong[1]);
        });
    function getApiUrl(provider, query, key) {
        query = encodeURIComponent(query);
        key = encodeURIComponent(key);
        switch (provider) {
            case "Google":
                return "https://maps.googleapis.com/maps/api/geocode/json?address=".concat(query, "&key=").concat(key);
            case "Geocodio":
                return "https://api.geocod.io/v1.3/geocode?q=".concat(query, "&api_key=").concat(key);
            case "LocationIQ":
                return "https://eu1.locationiq.com/v1/search.php?format=json&q=".concat(query, "&key=").concat(key);
            case "MapQuest":
                return "https://open.mapquestapi.com/geocoding/v1/address?location=".concat(query, "&key=").concat(key);
        }
    }
    function getLatLong(provider, response) {
        switch (provider) {
            case "Google":
                if (response.status !== "OK") {
                    throw new Error(response.error_message);
                }
                return [response.results[0].geometry.location.lat, response.results[0].geometry.location.lng];
            case "Geocodio":
                if (response.error) {
                    throw new Error(response.error);
                }
                if (response.results.length === 0) {
                    throw new Error("No results found");
                }
                return [response.results[0].location.lat, response.results[0].location.lng];
            case "LocationIQ":
                if (response.error) {
                    throw new Error(response.error);
                }
                if (response.length === 0) {
                    throw new Error("No results found");
                }
                return [response[0].lat, response[0].lon];
            case "MapQuest":
                if (response.info.statuscode !== 0) {
                    throw new Error(response.info.messages.join(", "));
                }
                if (response.results.length === 0) {
                    throw new Error("No results found");
                }
                return [response.results[0].locations[0].latLng.lat, response.results[0].locations[0].latLng.lng];
        }
    }
    function createMxObject(lat, long) {
        return new Promise(function(resolve, reject) {
            mx.data.create({
                entity: "NanoflowCommons.Position",
                callback: function callback(mxObject) {
                    mxObject.set("Latitude", lat);
                    mxObject.set("Longitude", long);
                    resolve(mxObject);
                },
                error: function error() {
                    reject("Could not create 'NanoflowCommons.Position' object to store coordinates");
                }
            });
        });
    }
    // END USER CODE
}
