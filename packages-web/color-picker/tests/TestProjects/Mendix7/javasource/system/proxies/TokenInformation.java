// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package system.proxies;

public class TokenInformation
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject tokenInformationMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "System.TokenInformation";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Token("Token"),
		ExpiryDate("ExpiryDate"),
		UserAgent("UserAgent"),
		TokenInformation_User("System.TokenInformation_User");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public TokenInformation(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "System.TokenInformation"));
	}

	protected TokenInformation(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject tokenInformationMendixObject)
	{
		if (tokenInformationMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("System.TokenInformation", tokenInformationMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a System.TokenInformation");

		this.tokenInformationMendixObject = tokenInformationMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'TokenInformation.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static system.proxies.TokenInformation initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return system.proxies.TokenInformation.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static system.proxies.TokenInformation initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new system.proxies.TokenInformation(context, mendixObject);
	}

	public static system.proxies.TokenInformation load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return system.proxies.TokenInformation.initialize(context, mendixObject);
	}

	public static java.util.List<system.proxies.TokenInformation> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<system.proxies.TokenInformation> result = new java.util.ArrayList<system.proxies.TokenInformation>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//System.TokenInformation" + xpathConstraint))
			result.add(system.proxies.TokenInformation.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * Set value of Token
	 * @param token
	 */
	public final void setToken(java.lang.String token)
	{
		setToken(getContext(), token);
	}

	/**
	 * Set value of Token
	 * @param context
	 * @param token
	 */
	public final void setToken(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String token)
	{
		getMendixObject().setValue(context, MemberNames.Token.toString(), token);
	}

	/**
	 * @return value of ExpiryDate
	 */
	public final java.util.Date getExpiryDate()
	{
		return getExpiryDate(getContext());
	}

	/**
	 * @param context
	 * @return value of ExpiryDate
	 */
	public final java.util.Date getExpiryDate(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.ExpiryDate.toString());
	}

	/**
	 * Set value of ExpiryDate
	 * @param expirydate
	 */
	public final void setExpiryDate(java.util.Date expirydate)
	{
		setExpiryDate(getContext(), expirydate);
	}

	/**
	 * Set value of ExpiryDate
	 * @param context
	 * @param expirydate
	 */
	public final void setExpiryDate(com.mendix.systemwideinterfaces.core.IContext context, java.util.Date expirydate)
	{
		getMendixObject().setValue(context, MemberNames.ExpiryDate.toString(), expirydate);
	}

	/**
	 * @return value of UserAgent
	 */
	public final java.lang.String getUserAgent()
	{
		return getUserAgent(getContext());
	}

	/**
	 * @param context
	 * @return value of UserAgent
	 */
	public final java.lang.String getUserAgent(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.UserAgent.toString());
	}

	/**
	 * Set value of UserAgent
	 * @param useragent
	 */
	public final void setUserAgent(java.lang.String useragent)
	{
		setUserAgent(getContext(), useragent);
	}

	/**
	 * Set value of UserAgent
	 * @param context
	 * @param useragent
	 */
	public final void setUserAgent(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String useragent)
	{
		getMendixObject().setValue(context, MemberNames.UserAgent.toString(), useragent);
	}

	/**
	 * @return value of TokenInformation_User
	 */
	public final system.proxies.User getTokenInformation_User() throws com.mendix.core.CoreException
	{
		return getTokenInformation_User(getContext());
	}

	/**
	 * @param context
	 * @return value of TokenInformation_User
	 */
	public final system.proxies.User getTokenInformation_User(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		system.proxies.User result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.TokenInformation_User.toString());
		if (identifier != null)
			result = system.proxies.User.load(context, identifier);
		return result;
	}

	/**
	 * Set value of TokenInformation_User
	 * @param tokeninformation_user
	 */
	public final void setTokenInformation_User(system.proxies.User tokeninformation_user)
	{
		setTokenInformation_User(getContext(), tokeninformation_user);
	}

	/**
	 * Set value of TokenInformation_User
	 * @param context
	 * @param tokeninformation_user
	 */
	public final void setTokenInformation_User(com.mendix.systemwideinterfaces.core.IContext context, system.proxies.User tokeninformation_user)
	{
		if (tokeninformation_user == null)
			getMendixObject().setValue(context, MemberNames.TokenInformation_User.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.TokenInformation_User.toString(), tokeninformation_user.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return tokenInformationMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final system.proxies.TokenInformation that = (system.proxies.TokenInformation) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "System.TokenInformation";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
