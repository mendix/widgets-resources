// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package rangeslider.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the RangeSlider module
	public static void aCT_afterSlideInterval(IContext context, rangeslider.proxies.Range _range)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Range", _range == null ? null : _range.getMendixObject());
			Core.execute(context, "RangeSlider.ACT_afterSlideInterval", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean aCT_AfterStartup(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			return (java.lang.Boolean)Core.execute(context, "RangeSlider.ACT_AfterStartup", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aCT_CreateData(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "RangeSlider.ACT_CreateData", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aCT_error_in_execution(IContext context, rangeslider.proxies.Range _progress)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Progress", _progress == null ? null : _progress.getMendixObject());
			Core.execute(context, "RangeSlider.ACT_error_in_execution", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aCT_onclickCircle_closePage(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "RangeSlider.ACT_onclickCircle_closePage", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void aCT_ValidateFeedback(IContext context, rangeslider.proxies.Range _range)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Range", _range == null ? null : _range.getMendixObject());
			Core.execute(context, "RangeSlider.ACT_ValidateFeedback", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static rangeslider.proxies.Range dS_DecimalValues(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "RangeSlider.DS_DecimalValues", params);
			return result == null ? null : rangeslider.proxies.Range.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static rangeslider.proxies.Range dS_LongValues(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "RangeSlider.DS_LongValues", params);
			return result == null ? null : rangeslider.proxies.Range.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static rangeslider.proxies.Range dS_LowerAndUpperBound(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "RangeSlider.DS_LowerAndUpperBound", params);
			return result == null ? null : rangeslider.proxies.Range.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static rangeslider.proxies.Range dS_NegativeValue(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "RangeSlider.DS_NegativeValue", params);
			return result == null ? null : rangeslider.proxies.Range.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static rangeslider.proxies.Range dS_StepValueless(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "RangeSlider.DS_StepValueless", params);
			return result == null ? null : rangeslider.proxies.Range.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static rangeslider.proxies.Range dS_ValueLessThanMin(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "RangeSlider.DS_ValueLessThanMin", params);
			return result == null ? null : rangeslider.proxies.Range.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static rangeslider.proxies.Range dSS_GetRange(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "RangeSlider.DSS_GetRange", params);
			return result == null ? null : rangeslider.proxies.Range.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static rangeslider.proxies.Range dSS_GetRangeNoValue(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "RangeSlider.DSS_GetRangeNoValue", params);
			return result == null ? null : rangeslider.proxies.Range.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static rangeslider.proxies.Range dSS_LowerGreatermax(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "RangeSlider.DSS_LowerGreatermax", params);
			return result == null ? null : rangeslider.proxies.Range.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static rangeslider.proxies.Range dSS_LowerLessMin(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "RangeSlider.DSS_LowerLessMin", params);
			return result == null ? null : rangeslider.proxies.Range.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static rangeslider.proxies.Range dSS_NoContext(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "RangeSlider.DSS_NoContext", params);
			return result == null ? null : rangeslider.proxies.Range.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static rangeslider.proxies.Range dSS_UpperEqualLower(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "RangeSlider.DSS_UpperEqualLower", params);
			return result == null ? null : rangeslider.proxies.Range.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static rangeslider.proxies.Range dSS_UpperGreatermax(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "RangeSlider.DSS_UpperGreatermax", params);
			return result == null ? null : rangeslider.proxies.Range.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static rangeslider.proxies.Range dSS_UpperLessMin(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			IMendixObject result = (IMendixObject)Core.execute(context, "RangeSlider.DSS_UpperLessMin", params);
			return result == null ? null : rangeslider.proxies.Range.initialize(context, result);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void oCH_LogValues(IContext context, rangeslider.proxies.Range _range)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("Range", _range == null ? null : _range.getMendixObject());
			Core.execute(context, "RangeSlider.OCH_LogValues", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}