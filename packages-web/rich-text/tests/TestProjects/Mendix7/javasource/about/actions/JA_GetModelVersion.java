// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package about.actions;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.FilePermission;
import com.mendix.thirdparty.org.json.JSONObject;
import com.mendix.thirdparty.org.json.JSONTokener;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.UserAction;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class JA_GetModelVersion extends CustomJavaAction<java.lang.String>
{
	private java.lang.Boolean includeRevision;

	public JA_GetModelVersion(IContext context, java.lang.Boolean includeRevision)
	{
		super(context);
		this.includeRevision = includeRevision;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		String modelVersion="";
		String major = "";
		String minor = "";
		String patch = "";
		String revision = "";
		try{
			Core.getLogger("About").info("Start retrieving about information");
			File f = Core.getConfiguration().getModelerFile();
			Core.getLogger("About").info("Retrieving modeller file: " + f.getAbsolutePath());
			FileInputStream input = new FileInputStream(f.getParent() + "\\metadata.json");
			Core.getLogger("About").info("Input stream metadata.json");
			InputStreamReader reader = new InputStreamReader(input);

			Core.getLogger("About").info("Start tokenizing");
			JSONTokener tokenizer = new JSONTokener(reader);
			JSONObject jsonObject = new JSONObject(tokenizer);
			modelVersion = jsonObject.getString("ModelVersion");
			reader.close();
			input.close();
			Core.getLogger("About").info("Model version: " + modelVersion);
			String[] versionNumber = modelVersion.split("\\.");
			if (versionNumber.length == 4){
				major = versionNumber[0];
				minor = versionNumber[1];
				patch = versionNumber[2];
				revision = versionNumber[3];
				if (includeRevision){
					modelVersion =  major + "." + minor + "." + patch + "." + revision;				
				}else{
					modelVersion = major + "." + minor + "." + patch;	
				}				
			}else{
				modelVersion = "unversioned";				
			}
		}catch (Exception e) {
			Core.getLogger("About").error("Error retrieving model version: " + e);
	
			modelVersion = "";
		}
		return modelVersion;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_GetModelVersion";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
