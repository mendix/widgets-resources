// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package myfirstmodule.proxies;

public class Signature extends system.proxies.Image
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "MyFirstModule.Signature";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		HasSignature("HasSignature"),
		AddedDate("AddedDate"),
		PublicThumbnailPath("PublicThumbnailPath"),
		FileID("FileID"),
		Name("Name"),
		DeleteAfterDownload("DeleteAfterDownload"),
		Contents("Contents"),
		HasContents("HasContents"),
		Size("Size"),
		Signature_Document("MyFirstModule.Signature_Document");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Signature(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "MyFirstModule.Signature"));
	}

	protected Signature(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject signatureMendixObject)
	{
		super(context, signatureMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("MyFirstModule.Signature", signatureMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a MyFirstModule.Signature");
	}

	/**
	 * @deprecated Use 'Signature.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static myfirstmodule.proxies.Signature initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return myfirstmodule.proxies.Signature.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static myfirstmodule.proxies.Signature initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new myfirstmodule.proxies.Signature(context, mendixObject);
	}

	public static myfirstmodule.proxies.Signature load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return myfirstmodule.proxies.Signature.initialize(context, mendixObject);
	}

	public static java.util.List<myfirstmodule.proxies.Signature> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<myfirstmodule.proxies.Signature> result = new java.util.ArrayList<myfirstmodule.proxies.Signature>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//MyFirstModule.Signature" + xpathConstraint))
			result.add(myfirstmodule.proxies.Signature.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of HasSignature
	 */
	public final java.lang.Boolean getHasSignature()
	{
		return getHasSignature(getContext());
	}

	/**
	 * @param context
	 * @return value of HasSignature
	 */
	public final java.lang.Boolean getHasSignature(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.HasSignature.toString());
	}

	/**
	 * Set value of HasSignature
	 * @param hassignature
	 */
	public final void setHasSignature(java.lang.Boolean hassignature)
	{
		setHasSignature(getContext(), hassignature);
	}

	/**
	 * Set value of HasSignature
	 * @param context
	 * @param hassignature
	 */
	public final void setHasSignature(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean hassignature)
	{
		getMendixObject().setValue(context, MemberNames.HasSignature.toString(), hassignature);
	}

	/**
	 * @return value of AddedDate
	 */
	public final java.util.Date getAddedDate()
	{
		return getAddedDate(getContext());
	}

	/**
	 * @param context
	 * @return value of AddedDate
	 */
	public final java.util.Date getAddedDate(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.AddedDate.toString());
	}

	/**
	 * Set value of AddedDate
	 * @param addeddate
	 */
	public final void setAddedDate(java.util.Date addeddate)
	{
		setAddedDate(getContext(), addeddate);
	}

	/**
	 * Set value of AddedDate
	 * @param context
	 * @param addeddate
	 */
	public final void setAddedDate(com.mendix.systemwideinterfaces.core.IContext context, java.util.Date addeddate)
	{
		getMendixObject().setValue(context, MemberNames.AddedDate.toString(), addeddate);
	}

	/**
	 * @return value of Signature_Document
	 */
	public final myfirstmodule.proxies.Document getSignature_Document() throws com.mendix.core.CoreException
	{
		return getSignature_Document(getContext());
	}

	/**
	 * @param context
	 * @return value of Signature_Document
	 */
	public final myfirstmodule.proxies.Document getSignature_Document(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		myfirstmodule.proxies.Document result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Signature_Document.toString());
		if (identifier != null)
			result = myfirstmodule.proxies.Document.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Signature_Document
	 * @param signature_document
	 */
	public final void setSignature_Document(myfirstmodule.proxies.Document signature_document)
	{
		setSignature_Document(getContext(), signature_document);
	}

	/**
	 * Set value of Signature_Document
	 * @param context
	 * @param signature_document
	 */
	public final void setSignature_Document(com.mendix.systemwideinterfaces.core.IContext context, myfirstmodule.proxies.Document signature_document)
	{
		if (signature_document == null)
			getMendixObject().setValue(context, MemberNames.Signature_Document.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Signature_Document.toString(), signature_document.getMendixObject().getId());
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final myfirstmodule.proxies.Signature that = (myfirstmodule.proxies.Signature) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "MyFirstModule.Signature";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Override
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
