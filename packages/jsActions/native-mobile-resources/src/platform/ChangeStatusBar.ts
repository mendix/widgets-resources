// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the code between BEGIN USER CODE and END USER CODE
// Other code you write will be lost the next time you deploy the project.

import { Platform, StatusBar, StatusBarAnimation, StatusBarStyle } from "react-native";

type Style = "DefaultStyle" | "LightContentStyle" | "DarkContentStyle";

/**
 * @param {"NativeMobileResources.StatusBarStyle.DefaultStyle"|"NativeMobileResources.StatusBarStyle.LightContentStyle"|"NativeMobileResources.StatusBarStyle.DarkContentStyle"} style - If empty, the current style is not changed.
 * @param {boolean} hidden
 * @param {boolean} animateChanges
 * @param {string} backgroundColor - If empty, the current background color is not changed.
 * @param {boolean} translucent
 * @param {boolean} networkActivityIndicatorVisible
 * @param {"NativeMobileResources.StatusBarHideShowAnimation.none"|"NativeMobileResources.StatusBarHideShowAnimation.fade"|"NativeMobileResources.StatusBarHideShowAnimation.slide"} animateHideShow - If empty, the default value 'none' is used.
 * @returns {Promise.<void>}
 */
export async function ChangeStatusBar(
    style?: Style,
    hidden?: boolean,
    animateChanges?: boolean,
    backgroundColor?: string,
    translucent?: boolean,
    networkActivityIndicatorVisible?: boolean,
    animateHideShow?: StatusBarAnimation
): Promise<void> {
    // BEGIN USER CODE

    if (style) {
        StatusBar.setBarStyle(mapStyleEnum(style), animateChanges);
    }

    if (hidden !== undefined) {
        StatusBar.setHidden(hidden, animateHideShow);
    }

    if (backgroundColor && Platform.OS === "android") {
        StatusBar.setBackgroundColor(backgroundColor, animateChanges);
    }

    if (translucent !== undefined && Platform.OS === "android") {
        StatusBar.setTranslucent(translucent);
    }

    if (networkActivityIndicatorVisible && Platform.OS === "ios") {
        StatusBar.setNetworkActivityIndicatorVisible(networkActivityIndicatorVisible);
    }

    return Promise.resolve();

    function mapStyleEnum(styleEnum: Style): StatusBarStyle {
        switch (styleEnum) {
            case "DefaultStyle":
                return "default";
            case "LightContentStyle":
                return "light-content";
            case "DarkContentStyle":
                return "dark-content";
        }
    }

    // END USER CODE
}
