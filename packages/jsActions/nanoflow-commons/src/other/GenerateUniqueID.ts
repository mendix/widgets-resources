// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.

// BEGIN EXTRA CODE
const COUNTER_STORE = "idCounter";
let locked = false;
let currentCounter: number;

function sleep(time: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, time));
}

async function initializeCounter(): Promise<void> {
    currentCounter = JSON.parse((await getItem(COUNTER_STORE)) || "-1");
}

function getItem(key: string): Promise<any> {
    if (navigator && navigator.product === "ReactNative") {
        const AsyncStorage = require("@react-native-community/async-storage").default;
        return AsyncStorage.getItem(key);
    }
    if (window) {
        const value = window.localStorage.getItem(key);
        return Promise.resolve(value);
    }
    return Promise.reject(new Error("No storage API available"));
}
function setItem(key: string, value: string): Promise<void> {
    if (navigator && navigator.product === "ReactNative") {
        const AsyncStorage = require("@react-native-community/async-storage").default;
        return AsyncStorage.setItem(key, value);
    }
    if (window) {
        window.localStorage.setItem(key, value);
        return Promise.resolve();
    }
    return Promise.reject(new Error("No storage API available"));
}
// END EXTRA CODE

/**
 * Generates a unique ID based on the current session.
 * @returns {Promise.<string>}
 */
export async function GenerateUniqueID(): Promise<string> {
    // BEGIN USER CODE

    const sessionId = mx.session.getConfig("sessionObjectId");
    const rnd = Math.round(Math.random() * 10000);

    // eslint-disable-next-line no-unmodified-loop-condition
    while (locked) {
        await sleep(10);
    }

    locked = true;

    if (typeof currentCounter === "undefined") {
        await initializeCounter();
    }

    await setItem(COUNTER_STORE, JSON.stringify(++currentCounter));

    locked = false;

    return `${sessionId}:${currentCounter}:${rnd}`;
    // END USER CODE
}
