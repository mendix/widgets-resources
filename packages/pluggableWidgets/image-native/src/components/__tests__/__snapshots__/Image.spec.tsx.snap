// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Widget Dynamic Image SVG renders the structure 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {},
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageSmallPressable"
>
  <RNSVGSvgView
    align="xMidYMid"
    bbHeight={9999}
    bbWidth={9999}
    color={4278190080}
    focusable={false}
    height={9999}
    id="Layer_1"
    meetOrSlice={0}
    minX={0}
    minY={0}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "borderWidth": 0,
        },
        Array [
          Object {
            "aspectRatio": 1,
          },
          Object {
            "flexGrow": 1,
            "maxHeight": "100%",
            "maxWidth": "100%",
            "minHeight": 8,
            "minWidth": 8,
          },
        ],
        Object {
          "opacity": 1,
        },
        Object {
          "flex": 0,
          "height": 9999,
          "width": 9999,
        },
      ]
    }
    testID="Image1$SvgUri"
    tintColor={4278190080}
    uri="this/is/a/fake/path.svg"
    vbHeight={9999}
    vbWidth={9999}
    version={1.1}
    width={9999}
    x="0px"
    xmlSpace="preserve"
    xmlns="http://www.w3.org/2000/svg"
    xmlnsXlink="http://www.w3.org/1999/xlink"
    y="0px"
  >
    <RNSVGGroup
      fill={
        Array [
          0,
          4278190080,
        ]
      }
      fillOpacity={1}
      fillRule={1}
      font={Object {}}
      matrix={
        Array [
          1,
          0,
          0,
          1,
          0,
          0,
        ]
      }
      opacity={1}
      originX={0}
      originY={0}
      propList={Array []}
      rotation={0}
      scaleX={1}
      scaleY={1}
      skewX={0}
      skewY={0}
      stroke={null}
      strokeDasharray={null}
      strokeDashoffset={null}
      strokeLinecap={0}
      strokeLinejoin={0}
      strokeMiterlimit={4}
      strokeOpacity={1}
      strokeWidth={1}
      vectorEffect={0}
      x={0}
      y={0}
    >
      <RNSVGPath
        d="M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z"
        fill={
          Array [
            0,
            4278190080,
          ]
        }
        fillOpacity={1}
        fillRule={1}
        matrix={
          Array [
            1,
            0,
            0,
            1,
            0,
            0,
          ]
        }
        opacity={1}
        originX={0}
        originY={0}
        propList={Array []}
        rotation={0}
        scaleX={1}
        scaleY={1}
        skewX={0}
        skewY={0}
        stroke={null}
        strokeDasharray={null}
        strokeDashoffset={null}
        strokeLinecap={0}
        strokeLinejoin={0}
        strokeMiterlimit={4}
        strokeOpacity={1}
        strokeWidth={1}
        vectorEffect={0}
        x={0}
        y={0}
      />
    </RNSVGGroup>
  </RNSVGSvgView>
</View>
`;

exports[`Widget Dynamic Image SVG renders the structure as a background image 1`] = `
<View
  onLayout={[Function]}
  style={
    Array [
      Object {
        "height": "100%",
        "width": "100%",
      },
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageBackgroundView"
>
  <View
    style={
      Object {
        "height": "100%",
        "left": 0,
        "opacity": 0.01,
        "position": "absolute",
        "top": 0,
        "width": "100%",
      }
    }
  />
  <Text>
    Background Image
  </Text>
</View>
`;

exports[`Widget Dynamic Image SVG renders the structure as a background image with 50% opacity 1`] = `
<View
  onLayout={[Function]}
  style={
    Array [
      Object {
        "height": "100%",
        "width": "100%",
      },
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageBackgroundView"
>
  <View
    style={
      Object {
        "height": "100%",
        "left": 0,
        "opacity": 0.5,
        "position": "absolute",
        "top": 0,
        "width": "100%",
      }
    }
  />
  <Text>
    Background Image
  </Text>
</View>
`;

exports[`Widget Dynamic Image SVG renders the structure as a background image with a different resizeMode 1`] = `
<View
  onLayout={[Function]}
  style={
    Array [
      Object {
        "height": "100%",
        "width": "100%",
      },
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageBackgroundView"
>
  <View
    style={
      Object {
        "height": "100%",
        "left": 0,
        "opacity": 0.01,
        "position": "absolute",
        "top": 0,
        "width": "100%",
      }
    }
  />
  <Text>
    Background Image
  </Text>
</View>
`;

exports[`Widget Dynamic Image SVG renders the structure inside a modal 1`] = `
Array [
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Array [
        Object {},
        Object {
          "alignItems": "center",
          "justifyContent": "center",
        },
      ]
    }
    testID="Image1$ImageSmallPressable"
  >
    <RNSVGSvgView
      align="xMidYMid"
      bbHeight={9999}
      bbWidth={9999}
      color={4278190080}
      focusable={false}
      height={9999}
      id="Layer_1"
      meetOrSlice={0}
      minX={0}
      minY={0}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "borderWidth": 0,
          },
          Array [
            Object {
              "aspectRatio": 1,
            },
            Object {
              "flexGrow": 1,
              "maxHeight": "100%",
              "maxWidth": "100%",
              "minHeight": 8,
              "minWidth": 8,
            },
          ],
          Object {
            "opacity": 1,
          },
          Object {
            "flex": 0,
            "height": 9999,
            "width": 9999,
          },
        ]
      }
      testID="Image1$SvgUri"
      tintColor={4278190080}
      uri="this/is/a/fake/path.svg"
      vbHeight={9999}
      vbWidth={9999}
      version={1.1}
      width={9999}
      x="0px"
      xmlSpace="preserve"
      xmlns="http://www.w3.org/2000/svg"
      xmlnsXlink="http://www.w3.org/1999/xlink"
      y="0px"
    >
      <RNSVGGroup
        fill={
          Array [
            0,
            4278190080,
          ]
        }
        fillOpacity={1}
        fillRule={1}
        font={Object {}}
        matrix={
          Array [
            1,
            0,
            0,
            1,
            0,
            0,
          ]
        }
        opacity={1}
        originX={0}
        originY={0}
        propList={Array []}
        rotation={0}
        scaleX={1}
        scaleY={1}
        skewX={0}
        skewY={0}
        stroke={null}
        strokeDasharray={null}
        strokeDashoffset={null}
        strokeLinecap={0}
        strokeLinejoin={0}
        strokeMiterlimit={4}
        strokeOpacity={1}
        strokeWidth={1}
        vectorEffect={0}
        x={0}
        y={0}
      >
        <RNSVGPath
          d="M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z"
          fill={
            Array [
              0,
              4278190080,
            ]
          }
          fillOpacity={1}
          fillRule={1}
          matrix={
            Array [
              1,
              0,
              0,
              1,
              0,
              0,
            ]
          }
          opacity={1}
          originX={0}
          originY={0}
          propList={Array []}
          rotation={0}
          scaleX={1}
          scaleY={1}
          skewX={0}
          skewY={0}
          stroke={null}
          strokeDasharray={null}
          strokeDashoffset={null}
          strokeLinecap={0}
          strokeLinejoin={0}
          strokeMiterlimit={4}
          strokeOpacity={1}
          strokeWidth={1}
          vectorEffect={0}
          x={0}
          y={0}
        />
      </RNSVGGroup>
    </RNSVGSvgView>
  </View>,
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onDismiss={[Function]}
    onRequestClose={[Function]}
    supportedOrientations={
      Array [
        "portrait",
        "portrait-upside-down",
        "landscape",
        "landscape-left",
        "landscape-right",
      ]
    }
    transparent={true}
    visible={true}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "rgba(0,0,0,0.8)",
          "height": "100%",
          "justifyContent": "center",
          "width": "100%",
        }
      }
      testID="Image1$ImageEnlargedPressable"
    >
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "height": 9999,
            "width": 9999,
          }
        }
      >
        <RNSVGSvgView
          align="xMidYMid"
          bbHeight={9999}
          bbWidth={9999}
          color={4278190080}
          focusable={false}
          height={9999}
          id="Layer_1"
          meetOrSlice={0}
          minX={0}
          minY={0}
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "borderWidth": 0,
              },
              Array [
                Object {
                  "aspectRatio": 1,
                },
                Object {
                  "flexGrow": 1,
                  "maxHeight": "100%",
                  "maxWidth": "100%",
                  "minHeight": 8,
                  "minWidth": 8,
                },
              ],
              Object {
                "opacity": 1,
              },
              Object {
                "flex": 0,
                "height": 9999,
                "width": 9999,
              },
            ]
          }
          testID="Image1$SvgUri"
          tintColor={4278190080}
          uri="this/is/a/fake/path.svg"
          vbHeight={9999}
          vbWidth={9999}
          version={1.1}
          width={9999}
          x="0px"
          xmlSpace="preserve"
          xmlns="http://www.w3.org/2000/svg"
          xmlnsXlink="http://www.w3.org/1999/xlink"
          y="0px"
        >
          <RNSVGGroup
            fill={
              Array [
                0,
                4278190080,
              ]
            }
            fillOpacity={1}
            fillRule={1}
            font={Object {}}
            matrix={
              Array [
                1,
                0,
                0,
                1,
                0,
                0,
              ]
            }
            opacity={1}
            originX={0}
            originY={0}
            propList={Array []}
            rotation={0}
            scaleX={1}
            scaleY={1}
            skewX={0}
            skewY={0}
            stroke={null}
            strokeDasharray={null}
            strokeDashoffset={null}
            strokeLinecap={0}
            strokeLinejoin={0}
            strokeMiterlimit={4}
            strokeOpacity={1}
            strokeWidth={1}
            vectorEffect={0}
            x={0}
            y={0}
          >
            <RNSVGPath
              d="M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z"
              fill={
                Array [
                  0,
                  4278190080,
                ]
              }
              fillOpacity={1}
              fillRule={1}
              matrix={
                Array [
                  1,
                  0,
                  0,
                  1,
                  0,
                  0,
                ]
              }
              opacity={1}
              originX={0}
              originY={0}
              propList={Array []}
              rotation={0}
              scaleX={1}
              scaleY={1}
              skewX={0}
              skewY={0}
              stroke={null}
              strokeDasharray={null}
              strokeDashoffset={null}
              strokeLinecap={0}
              strokeLinejoin={0}
              strokeMiterlimit={4}
              strokeOpacity={1}
              strokeWidth={1}
              vectorEffect={0}
              x={0}
              y={0}
            />
          </RNSVGGroup>
        </RNSVGSvgView>
      </View>
    </View>
  </Modal>,
]
`;

exports[`Widget Dynamic Image SVG renders the structure with custom height 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {},
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageSmallPressable"
>
  <RNSVGSvgView
    align="xMidYMid"
    bbHeight={100}
    bbWidth={100}
    color={4278190080}
    focusable={false}
    height={100}
    id="Layer_1"
    meetOrSlice={0}
    minX={0}
    minY={0}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "borderWidth": 0,
        },
        Array [
          Object {
            "aspectRatio": 1,
          },
          Object {
            "flexGrow": 1,
            "maxHeight": "100%",
            "maxWidth": "100%",
            "minHeight": 8,
            "minWidth": 8,
          },
        ],
        Object {
          "opacity": 1,
        },
        Object {
          "flex": 0,
          "height": 100,
          "width": 100,
        },
      ]
    }
    testID="Image1$SvgUri"
    tintColor={4278190080}
    uri="this/is/a/fake/path.svg"
    vbHeight={9999}
    vbWidth={9999}
    version={1.1}
    width={100}
    x="0px"
    xmlSpace="preserve"
    xmlns="http://www.w3.org/2000/svg"
    xmlnsXlink="http://www.w3.org/1999/xlink"
    y="0px"
  >
    <RNSVGGroup
      fill={
        Array [
          0,
          4278190080,
        ]
      }
      fillOpacity={1}
      fillRule={1}
      font={Object {}}
      matrix={
        Array [
          1,
          0,
          0,
          1,
          0,
          0,
        ]
      }
      opacity={1}
      originX={0}
      originY={0}
      propList={Array []}
      rotation={0}
      scaleX={1}
      scaleY={1}
      skewX={0}
      skewY={0}
      stroke={null}
      strokeDasharray={null}
      strokeDashoffset={null}
      strokeLinecap={0}
      strokeLinejoin={0}
      strokeMiterlimit={4}
      strokeOpacity={1}
      strokeWidth={1}
      vectorEffect={0}
      x={0}
      y={0}
    >
      <RNSVGPath
        d="M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z"
        fill={
          Array [
            0,
            4278190080,
          ]
        }
        fillOpacity={1}
        fillRule={1}
        matrix={
          Array [
            1,
            0,
            0,
            1,
            0,
            0,
          ]
        }
        opacity={1}
        originX={0}
        originY={0}
        propList={Array []}
        rotation={0}
        scaleX={1}
        scaleY={1}
        skewX={0}
        skewY={0}
        stroke={null}
        strokeDasharray={null}
        strokeDashoffset={null}
        strokeLinecap={0}
        strokeLinejoin={0}
        strokeMiterlimit={4}
        strokeOpacity={1}
        strokeWidth={1}
        vectorEffect={0}
        x={0}
        y={0}
      />
    </RNSVGGroup>
  </RNSVGSvgView>
</View>
`;

exports[`Widget Dynamic Image SVG renders the structure with custom width 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {},
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageSmallPressable"
>
  <RNSVGSvgView
    align="xMidYMid"
    bbHeight={100}
    bbWidth={100}
    color={4278190080}
    focusable={false}
    height={100}
    id="Layer_1"
    meetOrSlice={0}
    minX={0}
    minY={0}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "borderWidth": 0,
        },
        Array [
          Object {
            "aspectRatio": 1,
          },
          Object {
            "flexGrow": 1,
            "maxHeight": "100%",
            "maxWidth": "100%",
            "minHeight": 8,
            "minWidth": 8,
          },
        ],
        Object {
          "opacity": 1,
        },
        Object {
          "flex": 0,
          "height": 100,
          "width": 100,
        },
      ]
    }
    testID="Image1$SvgUri"
    tintColor={4278190080}
    uri="this/is/a/fake/path.svg"
    vbHeight={9999}
    vbWidth={9999}
    version={1.1}
    width={100}
    x="0px"
    xmlSpace="preserve"
    xmlns="http://www.w3.org/2000/svg"
    xmlnsXlink="http://www.w3.org/1999/xlink"
    y="0px"
  >
    <RNSVGGroup
      fill={
        Array [
          0,
          4278190080,
        ]
      }
      fillOpacity={1}
      fillRule={1}
      font={Object {}}
      matrix={
        Array [
          1,
          0,
          0,
          1,
          0,
          0,
        ]
      }
      opacity={1}
      originX={0}
      originY={0}
      propList={Array []}
      rotation={0}
      scaleX={1}
      scaleY={1}
      skewX={0}
      skewY={0}
      stroke={null}
      strokeDasharray={null}
      strokeDashoffset={null}
      strokeLinecap={0}
      strokeLinejoin={0}
      strokeMiterlimit={4}
      strokeOpacity={1}
      strokeWidth={1}
      vectorEffect={0}
      x={0}
      y={0}
    >
      <RNSVGPath
        d="M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z"
        fill={
          Array [
            0,
            4278190080,
          ]
        }
        fillOpacity={1}
        fillRule={1}
        matrix={
          Array [
            1,
            0,
            0,
            1,
            0,
            0,
          ]
        }
        opacity={1}
        originX={0}
        originY={0}
        propList={Array []}
        rotation={0}
        scaleX={1}
        scaleY={1}
        skewX={0}
        skewY={0}
        stroke={null}
        strokeDasharray={null}
        strokeDashoffset={null}
        strokeLinecap={0}
        strokeLinejoin={0}
        strokeMiterlimit={4}
        strokeOpacity={1}
        strokeWidth={1}
        vectorEffect={0}
        x={0}
        y={0}
      />
    </RNSVGGroup>
  </RNSVGSvgView>
</View>
`;

exports[`Widget Dynamic Image renders the structure 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {},
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageSmallPressable"
>
  <View
    style={
      Array [
        Object {
          "overflow": "hidden",
        },
        Array [
          Object {
            "aspectRatio": 2,
          },
          Object {
            "height": 1111,
            "width": 2222,
          },
          Object {
            "flexGrow": 1,
            "maxHeight": "100%",
            "maxWidth": "100%",
            "minHeight": 8,
            "minWidth": 8,
          },
        ],
      ]
    }
  >
    <FastImageView
      resizeMode="contain"
      source={
        Object {
          "height": 1111,
          "width": 2222,
        }
      }
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
      testID="Image1$Image"
    />
  </View>
</View>
`;

exports[`Widget Dynamic Image renders the structure as a background image 1`] = `
<View
  style={
    Array [
      Object {
        "height": 1111,
        "width": 2222,
      },
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageBackgroundView"
>
  <View
    style={
      Object {
        "height": "100%",
        "left": 0,
        "opacity": 0.01,
        "position": "absolute",
        "top": 0,
        "width": "100%",
      }
    }
  >
    <View
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {
              "aspectRatio": 2,
            },
            Object {
              "height": 1111,
              "width": 2222,
            },
            Object {
              "flexGrow": 1,
              "maxHeight": "100%",
              "maxWidth": "100%",
              "minHeight": 8,
              "minWidth": 8,
            },
          ],
        ]
      }
    >
      <FastImageView
        resizeMode="contain"
        source={
          Object {
            "height": 1111,
            "width": 2222,
          }
        }
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
        testID="Image1$Image"
      />
    </View>
  </View>
  <Text>
    Background Image
  </Text>
</View>
`;

exports[`Widget Dynamic Image renders the structure as a background image with 50% opacity 1`] = `
<View
  style={
    Array [
      Object {
        "height": 1111,
        "width": 2222,
      },
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageBackgroundView"
>
  <View
    style={
      Object {
        "height": "100%",
        "left": 0,
        "opacity": 0.5,
        "position": "absolute",
        "top": 0,
        "width": "100%",
      }
    }
  >
    <View
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {
              "aspectRatio": 2,
            },
            Object {
              "height": 1111,
              "width": 2222,
            },
            Object {
              "flexGrow": 1,
              "maxHeight": "100%",
              "maxWidth": "100%",
              "minHeight": 8,
              "minWidth": 8,
            },
          ],
        ]
      }
    >
      <FastImageView
        resizeMode="contain"
        source={
          Object {
            "height": 1111,
            "width": 2222,
          }
        }
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
        testID="Image1$Image"
      />
    </View>
  </View>
  <Text>
    Background Image
  </Text>
</View>
`;

exports[`Widget Dynamic Image renders the structure as a background image with a different resizeMode 1`] = `
<View
  style={
    Array [
      Object {
        "height": 1111,
        "width": 2222,
      },
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageBackgroundView"
>
  <View
    style={
      Object {
        "height": "100%",
        "left": 0,
        "opacity": 0.01,
        "position": "absolute",
        "top": 0,
        "width": "100%",
      }
    }
  >
    <View
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {
              "aspectRatio": 2,
            },
            Object {
              "height": 1111,
              "width": 2222,
            },
            Object {
              "flexGrow": 1,
              "maxHeight": "100%",
              "maxWidth": "100%",
              "minHeight": 8,
              "minWidth": 8,
            },
          ],
        ]
      }
    >
      <FastImageView
        resizeMode="cover"
        source={
          Object {
            "height": 1111,
            "width": 2222,
          }
        }
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
        testID="Image1$Image"
      />
    </View>
  </View>
  <Text>
    Background Image
  </Text>
</View>
`;

exports[`Widget Dynamic Image renders the structure inside a modal 1`] = `
Array [
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onLayout={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Array [
        Object {
          "aspectRatio": 2,
          "opacity": 0,
          "position": "absolute",
          "width": "100%",
        },
        Object {
          "alignItems": "center",
          "justifyContent": "center",
        },
      ]
    }
    testID="Image1$ImageSmallPressable"
  >
    <View
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {
              "aspectRatio": 2,
            },
            Object {},
            Object {
              "flexGrow": 1,
              "maxHeight": "100%",
              "maxWidth": "100%",
              "minHeight": 8,
              "minWidth": 8,
            },
          ],
        ]
      }
    >
      <FastImageView
        resizeMode="contain"
        source={
          Object {
            "height": 1111,
            "width": 2222,
          }
        }
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
        testID="Image1$Image"
      />
    </View>
  </View>,
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onDismiss={[Function]}
    onRequestClose={[Function]}
    supportedOrientations={
      Array [
        "portrait",
        "portrait-upside-down",
        "landscape",
        "landscape-left",
        "landscape-right",
      ]
    }
    transparent={true}
    visible={true}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "rgba(0,0,0,0.8)",
          "height": "100%",
          "justifyContent": "center",
          "width": "100%",
        }
      }
      testID="Image1$ImageEnlargedPressable"
    >
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "height": 1111,
            "width": 2222,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "overflow": "hidden",
              },
              Array [
                Object {
                  "aspectRatio": 2,
                },
                Object {
                  "height": 1111,
                  "width": 2222,
                },
                Object {
                  "flexGrow": 1,
                  "maxHeight": "100%",
                  "maxWidth": "100%",
                  "minHeight": 8,
                  "minWidth": 8,
                },
              ],
            ]
          }
        >
          <FastImageView
            resizeMode="contain"
            source={
              Object {
                "height": 1111,
                "width": 2222,
              }
            }
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
              }
            }
            testID="Image1$Image"
          />
        </View>
      </View>
    </View>
  </Modal>,
]
`;

exports[`Widget Dynamic Image renders the structure with custom height 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {},
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageSmallPressable"
>
  <View
    style={
      Array [
        Object {
          "overflow": "hidden",
        },
        Array [
          Object {
            "aspectRatio": 2,
          },
          Object {
            "height": 100,
            "width": 200,
          },
          Object {
            "flexGrow": 1,
            "maxHeight": "100%",
            "maxWidth": "100%",
            "minHeight": 8,
            "minWidth": 8,
          },
        ],
      ]
    }
  >
    <FastImageView
      resizeMode="contain"
      source={
        Object {
          "height": 1111,
          "width": 2222,
        }
      }
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
      testID="Image1$Image"
    />
  </View>
</View>
`;

exports[`Widget Dynamic Image renders the structure with custom width 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {},
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageSmallPressable"
>
  <View
    style={
      Array [
        Object {
          "overflow": "hidden",
        },
        Array [
          Object {
            "aspectRatio": 2,
          },
          Object {
            "height": 50,
            "width": 100,
          },
          Object {
            "flexGrow": 1,
            "maxHeight": "100%",
            "maxWidth": "100%",
            "minHeight": 8,
            "minWidth": 8,
          },
        ],
      ]
    }
  >
    <FastImageView
      resizeMode="contain"
      source={
        Object {
          "height": 1111,
          "width": 2222,
        }
      }
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
      testID="Image1$Image"
    />
  </View>
</View>
`;

exports[`Widget Icon type: icon/glyph renders the structure with an icon and default color 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {},
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageSmallPressable"
>
  <View
    testID="Image1$Icon"
  >
    <Text
      allowFontScaling={false}
      style={
        Array [
          Object {
            "color": "black",
            "fontSize": 16,
          },
          undefined,
          Object {
            "fontFamily": "GLYPHICONS Halflings",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
          Object {},
        ]
      }
    >
      +
    </Text>
  </View>
</View>
`;

exports[`Widget Icon type: image/staticImage renders the structure 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {},
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageSmallPressable"
>
  <View
    style={
      Array [
        Object {
          "overflow": "hidden",
        },
        Array [
          Object {
            "aspectRatio": 2,
          },
          Object {
            "height": 1111,
            "width": 2222,
          },
          Object {
            "flexGrow": 1,
            "maxHeight": "100%",
            "maxWidth": "100%",
            "minHeight": 8,
            "minWidth": 8,
          },
        ],
      ]
    }
  >
    <FastImageView
      resizeMode="contain"
      source={
        Object {
          "height": 1111,
          "width": 2222,
        }
      }
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
      testID="Image1$Image"
    />
  </View>
</View>
`;

exports[`Widget Icon type: image/staticImage renders the structure inside a modal 1`] = `
Array [
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Array [
        Object {},
        Object {
          "alignItems": "center",
          "justifyContent": "center",
        },
      ]
    }
    testID="Image1$ImageSmallPressable"
  >
    <View
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {
              "aspectRatio": 2,
            },
            Object {
              "height": 1111,
              "width": 2222,
            },
            Object {
              "flexGrow": 1,
              "maxHeight": "100%",
              "maxWidth": "100%",
              "minHeight": 8,
              "minWidth": 8,
            },
          ],
        ]
      }
    >
      <FastImageView
        resizeMode="contain"
        source={
          Object {
            "height": 1111,
            "width": 2222,
          }
        }
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
        testID="Image1$Image"
      />
    </View>
  </View>,
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onDismiss={[Function]}
    onRequestClose={[Function]}
    supportedOrientations={
      Array [
        "portrait",
        "portrait-upside-down",
        "landscape",
        "landscape-left",
        "landscape-right",
      ]
    }
    transparent={true}
    visible={true}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "rgba(0,0,0,0.8)",
          "height": "100%",
          "justifyContent": "center",
          "width": "100%",
        }
      }
      testID="Image1$ImageEnlargedPressable"
    >
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "height": 1111,
            "width": 2222,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "overflow": "hidden",
              },
              Array [
                Object {
                  "aspectRatio": 2,
                },
                Object {
                  "height": 1111,
                  "width": 2222,
                },
                Object {
                  "flexGrow": 1,
                  "maxHeight": "100%",
                  "maxWidth": "100%",
                  "minHeight": 8,
                  "minWidth": 8,
                },
              ],
            ]
          }
        >
          <FastImageView
            resizeMode="contain"
            source={
              Object {
                "height": 1111,
                "width": 2222,
              }
            }
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
              }
            }
            testID="Image1$Image"
          />
        </View>
      </View>
    </View>
  </Modal>,
]
`;

exports[`Widget Icon type: image/staticImage sets the correct styles 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {},
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageSmallPressable"
>
  <View
    style={
      Array [
        Object {
          "overflow": "hidden",
        },
        Array [
          Object {
            "aspectRatio": 2,
          },
          Object {
            "height": 1111,
            "width": 2222,
          },
          Object {
            "flexGrow": 1,
            "left": 1,
            "maxHeight": "100%",
            "maxWidth": "100%",
            "minHeight": 8,
            "minWidth": 8,
          },
        ],
      ]
    }
  >
    <FastImageView
      resizeMode="contain"
      source={
        Object {
          "height": 1111,
          "width": 2222,
        }
      }
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
      testID="Image1$Image"
    />
  </View>
</View>
`;

exports[`Widget Static Image SVG renders the structure 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {},
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageSmallPressable"
>
  <RNSVGSvgView
    align="xMidYMid"
    bbHeight={15}
    bbWidth={15}
    color={4278190080}
    focusable={false}
    height={15}
    id="Layer_1"
    meetOrSlice={0}
    minX={0}
    minY={0}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "borderWidth": 0,
        },
        Array [
          Object {
            "aspectRatio": 1,
          },
          Object {
            "flexGrow": 1,
            "maxHeight": "100%",
            "maxWidth": "100%",
            "minHeight": 8,
            "minWidth": 8,
          },
        ],
        Object {
          "opacity": 1,
        },
        Object {
          "flex": 0,
          "height": 15,
          "width": 15,
        },
      ]
    }
    testID="Image1$SvgXml"
    tintColor={4278190080}
    vbHeight={15}
    vbWidth={15}
    version={1.1}
    width={15}
    x="0px"
    xml="<svg version=\\"1.1\\" id=\\"Layer_1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" x=\\"0px\\" y=\\"0px\\"
	 width=\\"15px\\" height=\\"15px\\" viewBox=\\"0 0 15 15\\" style=\\"enable-background:new 0 0 15 15;\\" xml:space=\\"preserve\\">
<path d=\\"M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z\\"/>
</svg>
"
    xmlSpace="preserve"
    xmlns="http://www.w3.org/2000/svg"
    xmlnsXlink="http://www.w3.org/1999/xlink"
    y="0px"
  >
    <RNSVGGroup
      fill={
        Array [
          0,
          4278190080,
        ]
      }
      fillOpacity={1}
      fillRule={1}
      font={Object {}}
      matrix={
        Array [
          1,
          0,
          0,
          1,
          0,
          0,
        ]
      }
      opacity={1}
      originX={0}
      originY={0}
      propList={Array []}
      rotation={0}
      scaleX={1}
      scaleY={1}
      skewX={0}
      skewY={0}
      stroke={null}
      strokeDasharray={null}
      strokeDashoffset={null}
      strokeLinecap={0}
      strokeLinejoin={0}
      strokeMiterlimit={4}
      strokeOpacity={1}
      strokeWidth={1}
      vectorEffect={0}
      x={0}
      y={0}
    >
      <RNSVGPath
        d="M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z"
        fill={
          Array [
            0,
            4278190080,
          ]
        }
        fillOpacity={1}
        fillRule={1}
        matrix={
          Array [
            1,
            0,
            0,
            1,
            0,
            0,
          ]
        }
        opacity={1}
        originX={0}
        originY={0}
        propList={Array []}
        rotation={0}
        scaleX={1}
        scaleY={1}
        skewX={0}
        skewY={0}
        stroke={null}
        strokeDasharray={null}
        strokeDashoffset={null}
        strokeLinecap={0}
        strokeLinejoin={0}
        strokeMiterlimit={4}
        strokeOpacity={1}
        strokeWidth={1}
        vectorEffect={0}
        x={0}
        y={0}
      />
    </RNSVGGroup>
  </RNSVGSvgView>
</View>
`;

exports[`Widget Static Image SVG renders the structure as a background image 1`] = `
<View
  style={
    Array [
      Object {
        "height": 15,
        "width": 15,
      },
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageBackgroundView"
>
  <View
    style={
      Object {
        "height": "100%",
        "left": 0,
        "opacity": 0.01,
        "position": "absolute",
        "top": 0,
        "width": "100%",
      }
    }
  >
    <RNSVGSvgView
      align="xMidYMid"
      bbHeight={15}
      bbWidth={15}
      color={4278190080}
      focusable={false}
      height={15}
      id="Layer_1"
      meetOrSlice={0}
      minX={0}
      minY={0}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "borderWidth": 0,
          },
          Array [
            Object {
              "aspectRatio": 1,
            },
            Object {
              "flexGrow": 1,
              "maxHeight": "100%",
              "maxWidth": "100%",
              "minHeight": 8,
              "minWidth": 8,
            },
          ],
          Object {
            "opacity": 1,
          },
          Object {
            "flex": 0,
            "height": 15,
            "width": 15,
          },
        ]
      }
      testID="Image1$SvgXml"
      tintColor={4278190080}
      vbHeight={15}
      vbWidth={15}
      version={1.1}
      width={15}
      x="0px"
      xml="<svg version=\\"1.1\\" id=\\"Layer_1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" x=\\"0px\\" y=\\"0px\\"
	 width=\\"15px\\" height=\\"15px\\" viewBox=\\"0 0 15 15\\" style=\\"enable-background:new 0 0 15 15;\\" xml:space=\\"preserve\\">
<path d=\\"M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z\\"/>
</svg>
"
      xmlSpace="preserve"
      xmlns="http://www.w3.org/2000/svg"
      xmlnsXlink="http://www.w3.org/1999/xlink"
      y="0px"
    >
      <RNSVGGroup
        fill={
          Array [
            0,
            4278190080,
          ]
        }
        fillOpacity={1}
        fillRule={1}
        font={Object {}}
        matrix={
          Array [
            1,
            0,
            0,
            1,
            0,
            0,
          ]
        }
        opacity={1}
        originX={0}
        originY={0}
        propList={Array []}
        rotation={0}
        scaleX={1}
        scaleY={1}
        skewX={0}
        skewY={0}
        stroke={null}
        strokeDasharray={null}
        strokeDashoffset={null}
        strokeLinecap={0}
        strokeLinejoin={0}
        strokeMiterlimit={4}
        strokeOpacity={1}
        strokeWidth={1}
        vectorEffect={0}
        x={0}
        y={0}
      >
        <RNSVGPath
          d="M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z"
          fill={
            Array [
              0,
              4278190080,
            ]
          }
          fillOpacity={1}
          fillRule={1}
          matrix={
            Array [
              1,
              0,
              0,
              1,
              0,
              0,
            ]
          }
          opacity={1}
          originX={0}
          originY={0}
          propList={Array []}
          rotation={0}
          scaleX={1}
          scaleY={1}
          skewX={0}
          skewY={0}
          stroke={null}
          strokeDasharray={null}
          strokeDashoffset={null}
          strokeLinecap={0}
          strokeLinejoin={0}
          strokeMiterlimit={4}
          strokeOpacity={1}
          strokeWidth={1}
          vectorEffect={0}
          x={0}
          y={0}
        />
      </RNSVGGroup>
    </RNSVGSvgView>
  </View>
  <Text>
    Background Image
  </Text>
</View>
`;

exports[`Widget Static Image SVG renders the structure as a background image with 50% opacity 1`] = `
<View
  style={
    Array [
      Object {
        "height": 15,
        "width": 15,
      },
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageBackgroundView"
>
  <View
    style={
      Object {
        "height": "100%",
        "left": 0,
        "opacity": 0.5,
        "position": "absolute",
        "top": 0,
        "width": "100%",
      }
    }
  >
    <RNSVGSvgView
      align="xMidYMid"
      bbHeight={15}
      bbWidth={15}
      color={4278190080}
      focusable={false}
      height={15}
      id="Layer_1"
      meetOrSlice={0}
      minX={0}
      minY={0}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "borderWidth": 0,
          },
          Array [
            Object {
              "aspectRatio": 1,
            },
            Object {
              "flexGrow": 1,
              "maxHeight": "100%",
              "maxWidth": "100%",
              "minHeight": 8,
              "minWidth": 8,
            },
          ],
          Object {
            "opacity": 1,
          },
          Object {
            "flex": 0,
            "height": 15,
            "width": 15,
          },
        ]
      }
      testID="Image1$SvgXml"
      tintColor={4278190080}
      vbHeight={15}
      vbWidth={15}
      version={1.1}
      width={15}
      x="0px"
      xml="<svg version=\\"1.1\\" id=\\"Layer_1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" x=\\"0px\\" y=\\"0px\\"
	 width=\\"15px\\" height=\\"15px\\" viewBox=\\"0 0 15 15\\" style=\\"enable-background:new 0 0 15 15;\\" xml:space=\\"preserve\\">
<path d=\\"M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z\\"/>
</svg>
"
      xmlSpace="preserve"
      xmlns="http://www.w3.org/2000/svg"
      xmlnsXlink="http://www.w3.org/1999/xlink"
      y="0px"
    >
      <RNSVGGroup
        fill={
          Array [
            0,
            4278190080,
          ]
        }
        fillOpacity={1}
        fillRule={1}
        font={Object {}}
        matrix={
          Array [
            1,
            0,
            0,
            1,
            0,
            0,
          ]
        }
        opacity={1}
        originX={0}
        originY={0}
        propList={Array []}
        rotation={0}
        scaleX={1}
        scaleY={1}
        skewX={0}
        skewY={0}
        stroke={null}
        strokeDasharray={null}
        strokeDashoffset={null}
        strokeLinecap={0}
        strokeLinejoin={0}
        strokeMiterlimit={4}
        strokeOpacity={1}
        strokeWidth={1}
        vectorEffect={0}
        x={0}
        y={0}
      >
        <RNSVGPath
          d="M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z"
          fill={
            Array [
              0,
              4278190080,
            ]
          }
          fillOpacity={1}
          fillRule={1}
          matrix={
            Array [
              1,
              0,
              0,
              1,
              0,
              0,
            ]
          }
          opacity={1}
          originX={0}
          originY={0}
          propList={Array []}
          rotation={0}
          scaleX={1}
          scaleY={1}
          skewX={0}
          skewY={0}
          stroke={null}
          strokeDasharray={null}
          strokeDashoffset={null}
          strokeLinecap={0}
          strokeLinejoin={0}
          strokeMiterlimit={4}
          strokeOpacity={1}
          strokeWidth={1}
          vectorEffect={0}
          x={0}
          y={0}
        />
      </RNSVGGroup>
    </RNSVGSvgView>
  </View>
  <Text>
    Background Image
  </Text>
</View>
`;

exports[`Widget Static Image SVG renders the structure as a background image with a different resizeMode 1`] = `
<View
  style={
    Array [
      Object {
        "height": 15,
        "width": 15,
      },
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageBackgroundView"
>
  <View
    style={
      Object {
        "height": "100%",
        "left": 0,
        "opacity": 0.01,
        "position": "absolute",
        "top": 0,
        "width": "100%",
      }
    }
  >
    <RNSVGSvgView
      align="xMidYMid"
      bbHeight={15}
      bbWidth={15}
      color={4278190080}
      focusable={false}
      height={15}
      id="Layer_1"
      meetOrSlice={0}
      minX={0}
      minY={0}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "borderWidth": 0,
          },
          Array [
            Object {
              "aspectRatio": 1,
            },
            Object {
              "flexGrow": 1,
              "maxHeight": "100%",
              "maxWidth": "100%",
              "minHeight": 8,
              "minWidth": 8,
            },
          ],
          Object {
            "opacity": 1,
          },
          Object {
            "flex": 0,
            "height": 15,
            "width": 15,
          },
        ]
      }
      testID="Image1$SvgXml"
      tintColor={4278190080}
      vbHeight={15}
      vbWidth={15}
      version={1.1}
      width={15}
      x="0px"
      xml="<svg version=\\"1.1\\" id=\\"Layer_1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" x=\\"0px\\" y=\\"0px\\"
	 width=\\"15px\\" height=\\"15px\\" viewBox=\\"0 0 15 15\\" style=\\"enable-background:new 0 0 15 15;\\" xml:space=\\"preserve\\">
<path d=\\"M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z\\"/>
</svg>
"
      xmlSpace="preserve"
      xmlns="http://www.w3.org/2000/svg"
      xmlnsXlink="http://www.w3.org/1999/xlink"
      y="0px"
    >
      <RNSVGGroup
        fill={
          Array [
            0,
            4278190080,
          ]
        }
        fillOpacity={1}
        fillRule={1}
        font={Object {}}
        matrix={
          Array [
            1,
            0,
            0,
            1,
            0,
            0,
          ]
        }
        opacity={1}
        originX={0}
        originY={0}
        propList={Array []}
        rotation={0}
        scaleX={1}
        scaleY={1}
        skewX={0}
        skewY={0}
        stroke={null}
        strokeDasharray={null}
        strokeDashoffset={null}
        strokeLinecap={0}
        strokeLinejoin={0}
        strokeMiterlimit={4}
        strokeOpacity={1}
        strokeWidth={1}
        vectorEffect={0}
        x={0}
        y={0}
      >
        <RNSVGPath
          d="M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z"
          fill={
            Array [
              0,
              4278190080,
            ]
          }
          fillOpacity={1}
          fillRule={1}
          matrix={
            Array [
              1,
              0,
              0,
              1,
              0,
              0,
            ]
          }
          opacity={1}
          originX={0}
          originY={0}
          propList={Array []}
          rotation={0}
          scaleX={1}
          scaleY={1}
          skewX={0}
          skewY={0}
          stroke={null}
          strokeDasharray={null}
          strokeDashoffset={null}
          strokeLinecap={0}
          strokeLinejoin={0}
          strokeMiterlimit={4}
          strokeOpacity={1}
          strokeWidth={1}
          vectorEffect={0}
          x={0}
          y={0}
        />
      </RNSVGGroup>
    </RNSVGSvgView>
  </View>
  <Text>
    Background Image
  </Text>
</View>
`;

exports[`Widget Static Image SVG renders the structure inside a modal 1`] = `
Array [
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onLayout={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Array [
        Object {
          "aspectRatio": 1,
          "opacity": 0,
          "position": "absolute",
          "width": "100%",
        },
        Object {
          "alignItems": "center",
          "justifyContent": "center",
        },
      ]
    }
    testID="Image1$ImageSmallPressable"
  >
    <RNSVGSvgView
      align="xMidYMid"
      color={4278190080}
      focusable={false}
      id="Layer_1"
      meetOrSlice={0}
      minX={0}
      minY={0}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "borderWidth": 0,
          },
          Array [
            Object {
              "aspectRatio": 1,
            },
            Object {
              "flexGrow": 1,
              "maxHeight": "100%",
              "maxWidth": "100%",
              "minHeight": 8,
              "minWidth": 8,
            },
          ],
          Object {
            "opacity": 1,
          },
          null,
        ]
      }
      testID="Image1$SvgXml"
      tintColor={4278190080}
      vbHeight={15}
      vbWidth={15}
      version={1.1}
      x="0px"
      xml="<svg version=\\"1.1\\" id=\\"Layer_1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" x=\\"0px\\" y=\\"0px\\"
	 width=\\"15px\\" height=\\"15px\\" viewBox=\\"0 0 15 15\\" style=\\"enable-background:new 0 0 15 15;\\" xml:space=\\"preserve\\">
<path d=\\"M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z\\"/>
</svg>
"
      xmlSpace="preserve"
      xmlns="http://www.w3.org/2000/svg"
      xmlnsXlink="http://www.w3.org/1999/xlink"
      y="0px"
    >
      <RNSVGGroup
        fill={
          Array [
            0,
            4278190080,
          ]
        }
        fillOpacity={1}
        fillRule={1}
        font={Object {}}
        matrix={
          Array [
            1,
            0,
            0,
            1,
            0,
            0,
          ]
        }
        opacity={1}
        originX={0}
        originY={0}
        propList={Array []}
        rotation={0}
        scaleX={1}
        scaleY={1}
        skewX={0}
        skewY={0}
        stroke={null}
        strokeDasharray={null}
        strokeDashoffset={null}
        strokeLinecap={0}
        strokeLinejoin={0}
        strokeMiterlimit={4}
        strokeOpacity={1}
        strokeWidth={1}
        vectorEffect={0}
        x={0}
        y={0}
      >
        <RNSVGPath
          d="M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z"
          fill={
            Array [
              0,
              4278190080,
            ]
          }
          fillOpacity={1}
          fillRule={1}
          matrix={
            Array [
              1,
              0,
              0,
              1,
              0,
              0,
            ]
          }
          opacity={1}
          originX={0}
          originY={0}
          propList={Array []}
          rotation={0}
          scaleX={1}
          scaleY={1}
          skewX={0}
          skewY={0}
          stroke={null}
          strokeDasharray={null}
          strokeDashoffset={null}
          strokeLinecap={0}
          strokeLinejoin={0}
          strokeMiterlimit={4}
          strokeOpacity={1}
          strokeWidth={1}
          vectorEffect={0}
          x={0}
          y={0}
        />
      </RNSVGGroup>
    </RNSVGSvgView>
  </View>,
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onDismiss={[Function]}
    onRequestClose={[Function]}
    supportedOrientations={
      Array [
        "portrait",
        "portrait-upside-down",
        "landscape",
        "landscape-left",
        "landscape-right",
      ]
    }
    transparent={true}
    visible={true}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "rgba(0,0,0,0.8)",
          "height": "100%",
          "justifyContent": "center",
          "width": "100%",
        }
      }
      testID="Image1$ImageEnlargedPressable"
    >
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "height": 15,
            "width": 15,
          }
        }
      >
        <RNSVGSvgView
          align="xMidYMid"
          bbHeight={15}
          bbWidth={15}
          color={4278190080}
          focusable={false}
          height={15}
          id="Layer_1"
          meetOrSlice={0}
          minX={0}
          minY={0}
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "borderWidth": 0,
              },
              Array [
                Object {
                  "aspectRatio": 1,
                },
                Object {
                  "flexGrow": 1,
                  "maxHeight": "100%",
                  "maxWidth": "100%",
                  "minHeight": 8,
                  "minWidth": 8,
                },
              ],
              Object {
                "opacity": 1,
              },
              Object {
                "flex": 0,
                "height": 15,
                "width": 15,
              },
            ]
          }
          testID="Image1$SvgXml"
          tintColor={4278190080}
          vbHeight={15}
          vbWidth={15}
          version={1.1}
          width={15}
          x="0px"
          xml="<svg version=\\"1.1\\" id=\\"Layer_1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" x=\\"0px\\" y=\\"0px\\"
	 width=\\"15px\\" height=\\"15px\\" viewBox=\\"0 0 15 15\\" style=\\"enable-background:new 0 0 15 15;\\" xml:space=\\"preserve\\">
<path d=\\"M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z\\"/>
</svg>
"
          xmlSpace="preserve"
          xmlns="http://www.w3.org/2000/svg"
          xmlnsXlink="http://www.w3.org/1999/xlink"
          y="0px"
        >
          <RNSVGGroup
            fill={
              Array [
                0,
                4278190080,
              ]
            }
            fillOpacity={1}
            fillRule={1}
            font={Object {}}
            matrix={
              Array [
                1,
                0,
                0,
                1,
                0,
                0,
              ]
            }
            opacity={1}
            originX={0}
            originY={0}
            propList={Array []}
            rotation={0}
            scaleX={1}
            scaleY={1}
            skewX={0}
            skewY={0}
            stroke={null}
            strokeDasharray={null}
            strokeDashoffset={null}
            strokeLinecap={0}
            strokeLinejoin={0}
            strokeMiterlimit={4}
            strokeOpacity={1}
            strokeWidth={1}
            vectorEffect={0}
            x={0}
            y={0}
          >
            <RNSVGPath
              d="M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z"
              fill={
                Array [
                  0,
                  4278190080,
                ]
              }
              fillOpacity={1}
              fillRule={1}
              matrix={
                Array [
                  1,
                  0,
                  0,
                  1,
                  0,
                  0,
                ]
              }
              opacity={1}
              originX={0}
              originY={0}
              propList={Array []}
              rotation={0}
              scaleX={1}
              scaleY={1}
              skewX={0}
              skewY={0}
              stroke={null}
              strokeDasharray={null}
              strokeDashoffset={null}
              strokeLinecap={0}
              strokeLinejoin={0}
              strokeMiterlimit={4}
              strokeOpacity={1}
              strokeWidth={1}
              vectorEffect={0}
              x={0}
              y={0}
            />
          </RNSVGGroup>
        </RNSVGSvgView>
      </View>
    </View>
  </Modal>,
]
`;

exports[`Widget Static Image SVG renders the structure with custom height 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {},
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageSmallPressable"
>
  <RNSVGSvgView
    align="xMidYMid"
    bbHeight={15}
    bbWidth={15}
    color={4278190080}
    focusable={false}
    height={15}
    id="Layer_1"
    meetOrSlice={0}
    minX={0}
    minY={0}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "borderWidth": 0,
        },
        Array [
          Object {
            "aspectRatio": 1,
          },
          Object {
            "flexGrow": 1,
            "maxHeight": "100%",
            "maxWidth": "100%",
            "minHeight": 8,
            "minWidth": 8,
          },
        ],
        Object {
          "opacity": 1,
        },
        Object {
          "flex": 0,
          "height": 15,
          "width": 15,
        },
      ]
    }
    testID="Image1$SvgXml"
    tintColor={4278190080}
    vbHeight={15}
    vbWidth={15}
    version={1.1}
    width={15}
    x="0px"
    xml="<svg version=\\"1.1\\" id=\\"Layer_1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" x=\\"0px\\" y=\\"0px\\"
	 width=\\"15px\\" height=\\"15px\\" viewBox=\\"0 0 15 15\\" style=\\"enable-background:new 0 0 15 15;\\" xml:space=\\"preserve\\">
<path d=\\"M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z\\"/>
</svg>
"
    xmlSpace="preserve"
    xmlns="http://www.w3.org/2000/svg"
    xmlnsXlink="http://www.w3.org/1999/xlink"
    y="0px"
  >
    <RNSVGGroup
      fill={
        Array [
          0,
          4278190080,
        ]
      }
      fillOpacity={1}
      fillRule={1}
      font={Object {}}
      matrix={
        Array [
          1,
          0,
          0,
          1,
          0,
          0,
        ]
      }
      opacity={1}
      originX={0}
      originY={0}
      propList={Array []}
      rotation={0}
      scaleX={1}
      scaleY={1}
      skewX={0}
      skewY={0}
      stroke={null}
      strokeDasharray={null}
      strokeDashoffset={null}
      strokeLinecap={0}
      strokeLinejoin={0}
      strokeMiterlimit={4}
      strokeOpacity={1}
      strokeWidth={1}
      vectorEffect={0}
      x={0}
      y={0}
    >
      <RNSVGPath
        d="M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z"
        fill={
          Array [
            0,
            4278190080,
          ]
        }
        fillOpacity={1}
        fillRule={1}
        matrix={
          Array [
            1,
            0,
            0,
            1,
            0,
            0,
          ]
        }
        opacity={1}
        originX={0}
        originY={0}
        propList={Array []}
        rotation={0}
        scaleX={1}
        scaleY={1}
        skewX={0}
        skewY={0}
        stroke={null}
        strokeDasharray={null}
        strokeDashoffset={null}
        strokeLinecap={0}
        strokeLinejoin={0}
        strokeMiterlimit={4}
        strokeOpacity={1}
        strokeWidth={1}
        vectorEffect={0}
        x={0}
        y={0}
      />
    </RNSVGGroup>
  </RNSVGSvgView>
</View>
`;

exports[`Widget Static Image SVG renders the structure with custom width 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {},
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageSmallPressable"
>
  <RNSVGSvgView
    align="xMidYMid"
    bbHeight={15}
    bbWidth={15}
    color={4278190080}
    focusable={false}
    height={15}
    id="Layer_1"
    meetOrSlice={0}
    minX={0}
    minY={0}
    style={
      Array [
        Object {
          "backgroundColor": "transparent",
          "borderWidth": 0,
        },
        Array [
          Object {
            "aspectRatio": 1,
          },
          Object {
            "flexGrow": 1,
            "maxHeight": "100%",
            "maxWidth": "100%",
            "minHeight": 8,
            "minWidth": 8,
          },
        ],
        Object {
          "opacity": 1,
        },
        Object {
          "flex": 0,
          "height": 15,
          "width": 15,
        },
      ]
    }
    testID="Image1$SvgXml"
    tintColor={4278190080}
    vbHeight={15}
    vbWidth={15}
    version={1.1}
    width={15}
    x="0px"
    xml="<svg version=\\"1.1\\" id=\\"Layer_1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" x=\\"0px\\" y=\\"0px\\"
	 width=\\"15px\\" height=\\"15px\\" viewBox=\\"0 0 15 15\\" style=\\"enable-background:new 0 0 15 15;\\" xml:space=\\"preserve\\">
<path d=\\"M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z\\"/>
</svg>
"
    xmlSpace="preserve"
    xmlns="http://www.w3.org/2000/svg"
    xmlnsXlink="http://www.w3.org/1999/xlink"
    y="0px"
  >
    <RNSVGGroup
      fill={
        Array [
          0,
          4278190080,
        ]
      }
      fillOpacity={1}
      fillRule={1}
      font={Object {}}
      matrix={
        Array [
          1,
          0,
          0,
          1,
          0,
          0,
        ]
      }
      opacity={1}
      originX={0}
      originY={0}
      propList={Array []}
      rotation={0}
      scaleX={1}
      scaleY={1}
      skewX={0}
      skewY={0}
      stroke={null}
      strokeDasharray={null}
      strokeDashoffset={null}
      strokeLinecap={0}
      strokeLinejoin={0}
      strokeMiterlimit={4}
      strokeOpacity={1}
      strokeWidth={1}
      vectorEffect={0}
      x={0}
      y={0}
    >
      <RNSVGPath
        d="M14,7.5c0,3.5899-2.9101,6.5-6.5,6.5S1,11.0899,1,7.5S3.9101,1,7.5,1S14,3.9101,14,7.5z"
        fill={
          Array [
            0,
            4278190080,
          ]
        }
        fillOpacity={1}
        fillRule={1}
        matrix={
          Array [
            1,
            0,
            0,
            1,
            0,
            0,
          ]
        }
        opacity={1}
        originX={0}
        originY={0}
        propList={Array []}
        rotation={0}
        scaleX={1}
        scaleY={1}
        skewX={0}
        skewY={0}
        stroke={null}
        strokeDasharray={null}
        strokeDashoffset={null}
        strokeLinecap={0}
        strokeLinejoin={0}
        strokeMiterlimit={4}
        strokeOpacity={1}
        strokeWidth={1}
        vectorEffect={0}
        x={0}
        y={0}
      />
    </RNSVGGroup>
  </RNSVGSvgView>
</View>
`;

exports[`Widget Static Image renders the structure 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {},
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageSmallPressable"
>
  <View
    style={
      Array [
        Object {
          "overflow": "hidden",
        },
        Array [
          Object {
            "aspectRatio": 2,
          },
          Object {
            "height": 1111,
            "width": 2222,
          },
          Object {
            "flexGrow": 1,
            "maxHeight": "100%",
            "maxWidth": "100%",
            "minHeight": 8,
            "minWidth": 8,
          },
        ],
      ]
    }
  >
    <FastImageView
      resizeMode="contain"
      source={
        Object {
          "height": 1111,
          "width": 2222,
        }
      }
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
      testID="Image1$Image"
    />
  </View>
</View>
`;

exports[`Widget Static Image renders the structure as a background image 1`] = `
<View
  style={
    Array [
      Object {
        "height": 1111,
        "width": 2222,
      },
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageBackgroundView"
>
  <View
    style={
      Object {
        "height": "100%",
        "left": 0,
        "opacity": 0.01,
        "position": "absolute",
        "top": 0,
        "width": "100%",
      }
    }
  >
    <View
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {
              "aspectRatio": 2,
            },
            Object {
              "height": 1111,
              "width": 2222,
            },
            Object {
              "flexGrow": 1,
              "maxHeight": "100%",
              "maxWidth": "100%",
              "minHeight": 8,
              "minWidth": 8,
            },
          ],
        ]
      }
    >
      <FastImageView
        resizeMode="contain"
        source={
          Object {
            "height": 1111,
            "width": 2222,
          }
        }
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
        testID="Image1$Image"
      />
    </View>
  </View>
  <Text>
    Background Image
  </Text>
</View>
`;

exports[`Widget Static Image renders the structure as a background image with 50% opacity 1`] = `
<View
  style={
    Array [
      Object {
        "height": 1111,
        "width": 2222,
      },
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageBackgroundView"
>
  <View
    style={
      Object {
        "height": "100%",
        "left": 0,
        "opacity": 0.5,
        "position": "absolute",
        "top": 0,
        "width": "100%",
      }
    }
  >
    <View
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {
              "aspectRatio": 2,
            },
            Object {
              "height": 1111,
              "width": 2222,
            },
            Object {
              "flexGrow": 1,
              "maxHeight": "100%",
              "maxWidth": "100%",
              "minHeight": 8,
              "minWidth": 8,
            },
          ],
        ]
      }
    >
      <FastImageView
        resizeMode="contain"
        source={
          Object {
            "height": 1111,
            "width": 2222,
          }
        }
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
        testID="Image1$Image"
      />
    </View>
  </View>
  <Text>
    Background Image
  </Text>
</View>
`;

exports[`Widget Static Image renders the structure as a background image with a different resizeMode 1`] = `
<View
  style={
    Array [
      Object {
        "height": 1111,
        "width": 2222,
      },
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageBackgroundView"
>
  <View
    style={
      Object {
        "height": "100%",
        "left": 0,
        "opacity": 0.01,
        "position": "absolute",
        "top": 0,
        "width": "100%",
      }
    }
  >
    <View
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {
              "aspectRatio": 2,
            },
            Object {
              "height": 1111,
              "width": 2222,
            },
            Object {
              "flexGrow": 1,
              "maxHeight": "100%",
              "maxWidth": "100%",
              "minHeight": 8,
              "minWidth": 8,
            },
          ],
        ]
      }
    >
      <FastImageView
        resizeMode="cover"
        source={
          Object {
            "height": 1111,
            "width": 2222,
          }
        }
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
        testID="Image1$Image"
      />
    </View>
  </View>
  <Text>
    Background Image
  </Text>
</View>
`;

exports[`Widget Static Image renders the structure inside a modal 1`] = `
Array [
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onLayout={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Array [
        Object {
          "aspectRatio": 2,
          "opacity": 0,
          "position": "absolute",
          "width": "100%",
        },
        Object {
          "alignItems": "center",
          "justifyContent": "center",
        },
      ]
    }
    testID="Image1$ImageSmallPressable"
  >
    <View
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Array [
            Object {
              "aspectRatio": 2,
            },
            Object {},
            Object {
              "flexGrow": 1,
              "maxHeight": "100%",
              "maxWidth": "100%",
              "minHeight": 8,
              "minWidth": 8,
            },
          ],
        ]
      }
    >
      <FastImageView
        resizeMode="contain"
        source={
          Object {
            "height": 1111,
            "width": 2222,
          }
        }
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
        testID="Image1$Image"
      />
    </View>
  </View>,
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onDismiss={[Function]}
    onRequestClose={[Function]}
    supportedOrientations={
      Array [
        "portrait",
        "portrait-upside-down",
        "landscape",
        "landscape-left",
        "landscape-right",
      ]
    }
    transparent={true}
    visible={true}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "rgba(0,0,0,0.8)",
          "height": "100%",
          "justifyContent": "center",
          "width": "100%",
        }
      }
      testID="Image1$ImageEnlargedPressable"
    >
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "height": 1111,
            "width": 2222,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "overflow": "hidden",
              },
              Array [
                Object {
                  "aspectRatio": 2,
                },
                Object {
                  "height": 1111,
                  "width": 2222,
                },
                Object {
                  "flexGrow": 1,
                  "maxHeight": "100%",
                  "maxWidth": "100%",
                  "minHeight": 8,
                  "minWidth": 8,
                },
              ],
            ]
          }
        >
          <FastImageView
            resizeMode="contain"
            source={
              Object {
                "height": 1111,
                "width": 2222,
              }
            }
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
              }
            }
            testID="Image1$Image"
          />
        </View>
      </View>
    </View>
  </Modal>,
]
`;

exports[`Widget Static Image renders the structure with custom height 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {},
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageSmallPressable"
>
  <View
    style={
      Array [
        Object {
          "overflow": "hidden",
        },
        Array [
          Object {
            "aspectRatio": 2,
          },
          Object {
            "height": 100,
            "width": 200,
          },
          Object {
            "flexGrow": 1,
            "maxHeight": "100%",
            "maxWidth": "100%",
            "minHeight": 8,
            "minWidth": 8,
          },
        ],
      ]
    }
  >
    <FastImageView
      resizeMode="contain"
      source={
        Object {
          "height": 1111,
          "width": 2222,
        }
      }
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
      testID="Image1$Image"
    />
  </View>
</View>
`;

exports[`Widget Static Image renders the structure with custom width 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {},
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
  testID="Image1$ImageSmallPressable"
>
  <View
    style={
      Array [
        Object {
          "overflow": "hidden",
        },
        Array [
          Object {
            "aspectRatio": 2,
          },
          Object {
            "height": 50,
            "width": 100,
          },
          Object {
            "flexGrow": 1,
            "maxHeight": "100%",
            "maxWidth": "100%",
            "minHeight": 8,
            "minWidth": 8,
          },
        ],
      ]
    }
  >
    <FastImageView
      resizeMode="contain"
      source={
        Object {
          "height": 1111,
          "width": 2222,
        }
      }
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
      testID="Image1$Image"
    />
  </View>
</View>
`;
