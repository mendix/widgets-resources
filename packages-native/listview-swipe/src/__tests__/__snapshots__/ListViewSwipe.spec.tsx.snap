// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`List View Swipe render with  left and right with actions 1`] = `
<View
  collapsable={false}
  onGestureHandlerEvent={[Function]}
  onGestureHandlerStateChange={[Function]}
  onLayout={[Function]}
  style={
    Object {
      "overflow": "hidden",
    }
  }
>
  <View
    style={
      Object {
        "bottom": 0,
        "flexDirection": "row",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "transform": Array [
          Object {
            "translateX": -10000,
          },
        ],
      }
    }
  >
    <RNGestureHandlerButton
      activeOpacity={0.105}
      collapsable={false}
      onActiveStateChange={[Function]}
      onGestureEvent={[Function]}
      onGestureHandlerEvent={[Function]}
      onGestureHandlerStateChange={[Function]}
      onHandlerStateChange={[Function]}
      onPress={[Function]}
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Object {
            "alignItems": "stretch",
            "flex": 1,
            "flexDirection": "row",
            "justifyContent": "center",
            "panelSize": 192,
          },
        ]
      }
      underlayColor="black"
    >
      <View
        style={
          Object {
            "backgroundColor": "black",
            "bottom": 0,
            "left": 0,
            "opacity": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
      />
      <View>
        <Text>
          Left Side
        </Text>
      </View>
    </RNGestureHandlerButton>
    <View
      onLayout={[Function]}
    />
  </View>
  <View
    style={
      Object {
        "bottom": 0,
        "flexDirection": "row-reverse",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "transform": Array [
          Object {
            "translateX": -10000,
          },
        ],
      }
    }
  >
    <View
      onLayout={[Function]}
    />
  </View>
  <View
    collapsable={false}
    onGestureHandlerEvent={[Function]}
    onGestureHandlerStateChange={[Function]}
    pointerEvents="auto"
    style={
      Object {
        "transform": Array [
          Object {
            "translateX": -0,
          },
        ],
      }
    }
  >
    <View
      style={
        Object {
          "backgroundColor": "white",
          "flex": 1,
          "flexDirection": "column",
          "height": 80,
          "justifyContent": "space-between",
          "paddingHorizontal": 20,
          "paddingVertical": 10,
        }
      }
    />
  </View>
</View>
`;

exports[`List View Swipe render with left and action 1`] = `
<View
  collapsable={false}
  onGestureHandlerEvent={[Function]}
  onGestureHandlerStateChange={[Function]}
  onLayout={[Function]}
  style={
    Object {
      "overflow": "hidden",
    }
  }
>
  <View
    style={
      Object {
        "bottom": 0,
        "flexDirection": "row",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "transform": Array [
          Object {
            "translateX": -10000,
          },
        ],
      }
    }
  >
    <RNGestureHandlerButton
      activeOpacity={0.105}
      collapsable={false}
      onActiveStateChange={[Function]}
      onGestureEvent={[Function]}
      onGestureHandlerEvent={[Function]}
      onGestureHandlerStateChange={[Function]}
      onHandlerStateChange={[Function]}
      onPress={[Function]}
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Object {
            "alignItems": "stretch",
            "flex": 1,
            "flexDirection": "row",
            "justifyContent": "center",
            "panelSize": 192,
          },
        ]
      }
      underlayColor="black"
    >
      <View
        style={
          Object {
            "backgroundColor": "black",
            "bottom": 0,
            "left": 0,
            "opacity": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
      />
      <View>
        <Text>
          Test
        </Text>
      </View>
    </RNGestureHandlerButton>
    <View
      onLayout={[Function]}
    />
  </View>
  <View
    style={
      Object {
        "bottom": 0,
        "flexDirection": "row-reverse",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "transform": Array [
          Object {
            "translateX": -10000,
          },
        ],
      }
    }
  >
    <View
      onLayout={[Function]}
    />
  </View>
  <View
    collapsable={false}
    onGestureHandlerEvent={[Function]}
    onGestureHandlerStateChange={[Function]}
    pointerEvents="auto"
    style={
      Object {
        "transform": Array [
          Object {
            "translateX": -0,
          },
        ],
      }
    }
  >
    <View
      style={
        Object {
          "backgroundColor": "white",
          "flex": 1,
          "flexDirection": "column",
          "height": 80,
          "justifyContent": "space-between",
          "paddingHorizontal": 20,
          "paddingVertical": 10,
        }
      }
    />
  </View>
</View>
`;

exports[`List View Swipe render with right and action 1`] = `
<View
  collapsable={false}
  onGestureHandlerEvent={[Function]}
  onGestureHandlerStateChange={[Function]}
  onLayout={[Function]}
  style={
    Object {
      "overflow": "hidden",
    }
  }
>
  <View
    style={
      Object {
        "bottom": 0,
        "flexDirection": "row",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "transform": Array [
          Object {
            "translateX": -10000,
          },
        ],
      }
    }
  >
    <RNGestureHandlerButton
      activeOpacity={0.105}
      collapsable={false}
      onActiveStateChange={[Function]}
      onGestureEvent={[Function]}
      onGestureHandlerEvent={[Function]}
      onGestureHandlerStateChange={[Function]}
      onHandlerStateChange={[Function]}
      onPress={[Function]}
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Object {
            "alignItems": "stretch",
            "flex": 1,
            "flexDirection": "row",
            "justifyContent": "center",
            "panelSize": 192,
          },
        ]
      }
      underlayColor="black"
    >
      <View
        style={
          Object {
            "backgroundColor": "black",
            "bottom": 0,
            "left": 0,
            "opacity": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
      />
      <View>
        <Text>
          Test
        </Text>
      </View>
    </RNGestureHandlerButton>
    <View
      onLayout={[Function]}
    />
  </View>
  <View
    style={
      Object {
        "bottom": 0,
        "flexDirection": "row-reverse",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "transform": Array [
          Object {
            "translateX": -10000,
          },
        ],
      }
    }
  >
    <View
      onLayout={[Function]}
    />
  </View>
  <View
    collapsable={false}
    onGestureHandlerEvent={[Function]}
    onGestureHandlerStateChange={[Function]}
    pointerEvents="auto"
    style={
      Object {
        "transform": Array [
          Object {
            "translateX": -0,
          },
        ],
      }
    }
  >
    <View
      style={
        Object {
          "backgroundColor": "white",
          "flex": 1,
          "flexDirection": "column",
          "height": 80,
          "justifyContent": "space-between",
          "paddingHorizontal": 20,
          "paddingVertical": 10,
        }
      }
    />
  </View>
</View>
`;

exports[`List View Swipe renders 1`] = `
<View
  collapsable={false}
  onGestureHandlerEvent={[Function]}
  onGestureHandlerStateChange={[Function]}
  onLayout={[Function]}
  style={
    Object {
      "overflow": "hidden",
    }
  }
>
  <View
    style={
      Object {
        "bottom": 0,
        "flexDirection": "row",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "transform": Array [
          Object {
            "translateX": -10000,
          },
        ],
      }
    }
  >
    <RNGestureHandlerButton
      activeOpacity={0.105}
      collapsable={false}
      onActiveStateChange={[Function]}
      onGestureEvent={[Function]}
      onGestureHandlerEvent={[Function]}
      onGestureHandlerStateChange={[Function]}
      onHandlerStateChange={[Function]}
      onPress={[Function]}
      style={
        Array [
          Object {
            "overflow": "hidden",
          },
          Object {
            "alignItems": "stretch",
            "flex": 1,
            "flexDirection": "row",
            "justifyContent": "center",
            "panelSize": 192,
          },
        ]
      }
      underlayColor="black"
    >
      <View
        style={
          Object {
            "backgroundColor": "black",
            "bottom": 0,
            "left": 0,
            "opacity": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
      />
      <View>
        <Text>
          Test
        </Text>
      </View>
    </RNGestureHandlerButton>
    <View
      onLayout={[Function]}
    />
  </View>
  <View
    style={
      Object {
        "bottom": 0,
        "flexDirection": "row-reverse",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "transform": Array [
          Object {
            "translateX": -10000,
          },
        ],
      }
    }
  >
    <View
      onLayout={[Function]}
    />
  </View>
  <View
    collapsable={false}
    onGestureHandlerEvent={[Function]}
    onGestureHandlerStateChange={[Function]}
    pointerEvents="auto"
    style={
      Object {
        "transform": Array [
          Object {
            "translateX": -0,
          },
        ],
      }
    }
  >
    <View
      style={
        Object {
          "backgroundColor": "white",
          "flex": 1,
          "flexDirection": "column",
          "height": 80,
          "justifyContent": "space-between",
          "paddingHorizontal": 20,
          "paddingVertical": 10,
        }
      }
    />
  </View>
</View>
`;
