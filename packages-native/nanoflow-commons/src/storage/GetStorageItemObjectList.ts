// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the code between BEGIN USER CODE and END USER CODE
// Other code you write will be lost the next time you deploy the project.

import ReactNative from "react-native";

/**
 * @returns {MxObject}
 */
function GetStorageItemObjectList(key?: string, entity?: string): Promise<mendix.lib.MxObject[]> {
    // BEGIN USER CODE
    // Documentation https://facebook.github.io/react-native/docs/asyncstorage

    const AsyncStorage: typeof ReactNative.AsyncStorage = require("react-native").AsyncStorage;

    if (!key) {
        throw new TypeError("Input parameter 'Key' is required");
    }

    if (!entity) {
        throw new TypeError("Input parameter 'Entity' is required");
    }

    return AsyncStorage.getItem(key).then(result => {
        if (result === null) {
            throw new Error(`Storage item '${key}' does not exist`);
        }
        const values: Array<{ [key: string]: number | boolean | string }> = JSON.parse(result);
        return Promise.all(values.map(value => createMxObject(entity, value)));
    });

    function createMxObject(
        entityName: string,
        attributes: { [key: string]: number | boolean | string }
    ): Promise<mendix.lib.MxObject> {
        return new Promise((resolve, reject) => {
            mx.data.create({
                entity: entityName,
                callback: mxObject => {
                    Object.keys(attributes).forEach(attributeName => {
                        const attributeValue = attributes[attributeName];
                        mxObject.set(attributeName, attributeValue);
                    });
                    resolve(mxObject);
                },
                error: () => reject(`Could not create '${entityName}' object`)
            });
        });
    }
    // END USER CODE
}
