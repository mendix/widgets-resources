// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the code between BEGIN USER CODE and END USER CODE
// Other code you write will be lost the next time you deploy the project.

import ReactNative from "react-native";
import { StorageValue } from "./StorageValue";

/**
 * @returns {MxObject}
 */
function GetStorageItemObjectList(key?: string, entity?: string): Promise<mendix.lib.MxObject[]> {
    // BEGIN USER CODE
    // Documentation https://facebook.github.io/react-native/docs/asyncstorage

    const AsyncStorage: typeof ReactNative.AsyncStorage = require("react-native").AsyncStorage;

    if (!key) {
        throw new TypeError("Input parameter 'Key' is required");
    }

    if (!entity) {
        throw new TypeError("Input parameter 'Entity' is required");
    }

    return AsyncStorage.getItem(key).then(result => {
        if (result === null) {
            throw new Error(`Storage item '${key}' does not exist`);
        }
        const values: StorageValue[] = JSON.parse(result);

        return Promise.all(values.map(value => getOrCreateMxObject(entity, value))).then(newObjects => {
            const newValues = newObjects.map(newObject => serializeMxObject(newObject));
            return AsyncStorage.setItem(key, JSON.stringify(newValues)).then(() => newObjects);
        });
    });

    function getOrCreateMxObject(entity: string, value: StorageValue): Promise<mendix.lib.MxObject> {
        return getMxObject(value.guid).then(existingObject => {
            if (existingObject) {
                return existingObject;
            } else {
                return createMxObject(entity, value);
            }
        });
    }

    function getMxObject(guid: string): Promise<mendix.lib.MxObject | undefined> {
        return new Promise((resolve, reject) => {
            mx.data.get({
                guid,
                callback: mxObject => resolve(mxObject),
                error: (error: Error) => reject(error)
            });
        });
    }

    function createMxObject(entity: string, value: StorageValue): Promise<mendix.lib.MxObject> {
        return new Promise((resolve, reject) => {
            mx.data.create({
                entity,
                callback: mxObject => {
                    Object.keys(value)
                        .filter(attribute => attribute !== "guid")
                        .forEach(attributeName => {
                            const attributeValue = value[attributeName];
                            mxObject.set(attributeName, attributeValue);
                        });
                    resolve(mxObject);
                },
                error: () => reject(`Could not create '${entity}' object`)
            });
        });
    }

    function serializeMxObject(object: mendix.lib.MxObject): StorageValue {
        return object.getAttributes().reduce<StorageValue>(
            (accumulator, attributeName) => {
                accumulator[attributeName] = object.get(attributeName);
                return accumulator;
            },
            { guid: object.getGuid() }
        );
    }
    // END USER CODE
}
